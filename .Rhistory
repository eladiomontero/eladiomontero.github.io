preObj1 = preProcess(te_il[,-13], method = "pca", thresh = 0.8)
te = predict(preObj1, te_il[,-13])
preObj
te_il = testing[, il]
te_il$diagnosis = testing$diagnosis
test_pc = predict(preObj, te_il[-13])
confusionMatrix(testing$diagnosis,predict(model,testPC))
confusionMatrix(testing$diagnosis,predict(model,test_pc))
confusionMatrix(testing$diagnosis,predict(model1,test_pc))
confusionMatrix(testing$diagnosis,predict(model2,test_pc))
confusionMatrix(testing$diagnosis,model2)
model1 = train(diagnosis ~., data = tr_il, method = "glm")
confusionMatrix(testing$diagnosis,predict(model1,te_il))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Age,CompressiveStrength,data = training)
qplot(CompressiveStrength, Age,data = training)
View(training)
qplot(CompressiveStrength, rownames,data = training)
qplot(CompressiveStrength, row.names,data = training)
qplot(CompressiveStrength, Age,data = training)
cutStrength = cut2(training$CompressiveStrength, g = 3)
qplot(cutStrength, Age,data = training)
qplot(cutStrength, Age,colour = Cement,data = training)
cutAge = cut2(training$Age, g = 3)
qplot(CompressiveStrength, cutAge,data = training)
table(cutAge)
cutAge = cut2(training$Age, g = 4)
table(cutAge)
qplot(CompressiveStrength, cutAge,data = training)
?seq
seq(from = 1, to = lenght(training$row.names))
seq(from = 1, to = len(training$row.names))
seq(from = 1, to = length(training$row.names))
length(training$row.names)
length(training)
length(training[,1])
seq(from = 1, to = length(training[,1]))
training$index = seq(from = 1, to = length(training[,1]))
qplot(CompressiveStrength, index,data = training)
qplot(CompressiveStrength, index, colour = Age,data = training)
qplot(CompressiveStrength, index, colour = cutAge,data = training)
cutAge = cut2(training$FlyAsh, g = 4)
cutFly = cut2(training$FlyAsh, g = 4)
qplot(CompressiveStrength, index, colour = cutFly,data = training)
modFit = train(CompressiveStrength~ Age+FlyAsh+Cement+Water, method = "lm", data =training)
modFit$finalModel
modFit
qplot(CompressiveStrength, FlyAsh, colour = cutFly,data = training)
plot(finMod,1,pch = 19, cex = 0.5)
plot(modFit$finalModel,1,pch = 19, cex = 0.5)
finMod = modFit$finalModel
qplot(finMod$fitted, finMod$residuals, colour = cutFly)
qplot(finMod$fitted, finMod$residuals, colour = cutAge)
cutAge = cut2(training$Age, g = 4)
qplot(finMod$fitted, finMod$residuals, colour = cutAge)
plot(finMod$residuals)
plot(finMod$residuals, pch = 19)
plot(training$CompressiveStrength, pch = 19)
plot(finMod$residuals, pch = 19)
source('~/R/predicting.R')
source('~/R/predicting.R')
source('~/R/predicting.R')
source('~/R/predicting.R')
source('~/R/predicting.R')
source('~/R/predicting.R')
qplot(Sepal.Length, Sepal.Width, data = training, colour = Species)
qplot(Sepal.Length, Petal.Length, data = training, colour = Species)
source('~/R/predicting.R')
source('~/R/predicting.R')
source('~/R/predicting.R')
install.packages("rattle")
library(rattle)
source('~/R/predicting.R')
install.packages("rpart.plot")
source('~/R/predicting.R')
source('~/R/predicting.R')
predict(modFit, newdata = testing)
?download
file.download
file.get
get.file
file
?file
training_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "training.csv")
testing_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "testing.csv")
testing = read.csv("testing.csv", stringsAsFactors = "F")
training = read.csv("training.csv", stringsAsFactors = "F")
testing = read.csv(testing_file, stringAsFactors = "F")
testing = read.csv("testing.csv", stringsAsFactors = F)
training = read.csv("training.csv", stringsAsFactors = F)
View(training)
View(testing)
View(training)
names(training)
View(training)
names(training[160,])
names(training[,160])
training[,160]
preObj = preProcess(training[,-160], method = "pca",  thresh = 0.95)
View(training)
training[,2]
preObj = preProcess(training[,c(-160,-2)], method = "pca",  thresh = 0.95)
View(training)
preObj = preProcess(training[,c(-160,-2,-6)], method = "pca",  thresh = 0.95)
class(training)
summary(training)
training_filt = training[ , colSums(is.na(training)) == 0]
summary(training_filt)
plot(training_filt$classe)
training_filt$classe
plot(as.factor(training_filt$classe))
library(caret)
library(ggplot2)
training_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "training.csv")
testing_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "testing.csv")
testing_p = read.csv("testing.csv", stringsAsFactors = F)
training_p = read.csv("training.csv", stringsAsFactors = F)
inTrain = createDataPartition(y = classe, p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
summary(training)
training_filt = training[ , colSums(is.na(training)) == 0]
inTrain = createDataPartition(y = classe, data = training_p p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
summary(training)
training_filt = training[ , colSums(is.na(training)) == 0]
inTrain = createDataPartition(y = classe, data = training_p, p = 0.75, list = F)
inTrain = createDataPartition(y = training_p$classe, p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
summary(training)
training_filt = training[ , colSums(is.na(training)) == 0]
testing_p = read.csv("testing.csv")
training_p = read.csv("training.csv")
inTrain = createDataPartition(y = training_p$classe, p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
summary(training)
training_filt = training[ , colSums(is.na(training)) == 0]
plot(training$classe)
summary(training$classe)
summary(training_filt$classe)
View(training_filt)
unique(training$classe)
modelFit = train(classe~., data = training_filt, preProcess = c("pca"), method = "glm")
?head
modFit = train(classe~., method = "rpart", data = head(training_filt, n = 50))
View(training_filt)
testing_p = read.csv("testing.csv", na.strings =c(""))
training_p = read.csv("training.csv", na.string = c(""))
inTrain = createDataPartition(y = training_p$classe, p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
summary(training)
training_filt = training[ , colSums(is.na(training)) == 0]
testing_p = read.csv("testing.csv", na.strings =c(""), quote = "")
training_p = read.csv("training.csv", na.string = c(""), quote = "")
inTrain = createDataPartition(y = training_p$classe, p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
training_filt = training[ , colSums(is.na(training)) == 0]
testing_p = read.csv("testing.csv", na.strings =c(""), quote = "")
training_p = read.csv("training.csv", na.string = c(""), quote = "")
View(training_p)
testing_p = read.csv("testing.csv", na.strings =c(""))
training_p = read.csv("training.csv", na.string = c(""))
training_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "training.csv", method = "curl")
testing_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "testing.csv", , method = "curl")
testing_p = read.csv("testing.csv", na.strings =c(""))
training_p = read.csv("training.csv", na.string = c(""))
training_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "training.csv", method = "wget")
testing_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "testing.csv", , method = "wget")
testing_p = read.csv("testing.csv", na.strings =c(""))
training_p = read.csv("training.csv", na.string = c(""))
training_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "training.csv", method = "curl")
testing_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "testing.csv", method = "curl")
training_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "training.csv", method = "curl")
testing_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "testing.csv", method = "curl")
training_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "training.csv", method = "wget")
testing_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "testing.csv", method = "wget")
training_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "training.csv")
testing_file = download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "testing.csv")
testing_p = read.csv("testing.csv", na.strings =c(""), quote = '')
training_p = read.csv("training.csv", na.string = c(""), , quote = '')
inTrain = createDataPartition(y = training_p$classe, p = 0.75, list = F)
View(training_p)
testing_p = read.csv("testing.csv", na.strings =c("",'', "NA"), quote = '')
training_p = read.csv("training.csv", na.strings =c("",'', "NA"), quote = '')
View(training_p)
testing_p = read.csv("testing.csv", na.strings =c("",'', "NA"))
training_p = read.csv("training.csv", na.strings =c("",'', "NA"))
View(training_p)
inTrain = createDataPartition(y = training_p$classe, p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
training_filt = training[ , colSums(is.na(training)) == 0]
modFit = train(classe~., method = "rpart", data = training_filt)
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
modFit = train(classe~., method = "rpart", preProcessing = c("pca"), data = head(training_filt, n =100))
modFit = train(classe~., method = "rpart", preProcessing = c("pca"), data = training_filt)
nums <- sapply(training_filt, is.numeric)
nums
only_nums = training_filt[, nums]
preObj = preProcess(only_nums, method = "pca". thresh = 0.9)
preObj = preProcess(only_nums, method = "pca", thresh = 0.9)
preObj
pred = predict(preObj, only_nums)
View(pred)
pred$classe = training$classe
View(pred)
View(only_nums)
names(nums)
nums[nums,]
model = train(classe~., data = only_nums, method = "glm")
model = train(classe~., data = pred, method = "glm")
warnings()
model = train(classe~., data = pred, method = "rpart")
fancyRpartPlot(model$finalModel)
plot(training_filt$classe)
confusionMatrix(testing$classe,predict(model,pred))
model
model = train(classe~., data = pred, method = "glm")
warnings()
model = train(classe~., data = pred, method = "rf")
model
confussionMatrix(testing$classe,model)
confusionMatrix(testing$classe,model)
confusionMatrix(testing$classe,predict(model, newdata = testing))
model = train(classe~., data = pred, method = "rf", preProcess = "pca")
confusionMatrix(testing$classe, predict(model, newdata = testing))
model = train(classe~., data = pred, method = "rf", preProcess = "pca")
model = train(classe~., data = training_filt, method = "rf", preProcess = "pca")
confussionMatrix(testing$classe, predict(model, newdata = testing))
confusionMatrix(testing$classe, predict(model, newdata = testing))
predict(model, newdata = testing_p)
str(testing)
plot(training_p$classe)
training_filt[, nums]
summary(training_filt[, nums])
plot(training_filt$gyros_forearm_z, type = hist)
plot(training_filt$gyros_forearm_z)
hist(training_filt$gyros_forearm_z)
set.seed(2172)
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
testing_p = read.csv("../testing.csv", na.strings =c("",'', "NA"))
training_p = read.csv("../training.csv", na.strings =c("",'', "NA"))
testing_p = read.csv("/testing.csv", na.strings =c("",'', "NA"))
training_p = read.csv("/training.csv", na.strings =c("",'', "NA"))
testing_p = read.csv("testing.csv", na.strings =c("",'', "NA"))
training_p = read.csv("training.csv", na.strings =c("",'', "NA"))
inTrain = createDataPartition(y = training_p$classe, p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
training_filt = training[ , colSums(is.na(training)) == 0]
library(caret)
inTrain = createDataPartition(y = training_p$classe, p = 0.75, list = F)
training = training_p[inTrain,]
testing = training_p[-inTrain,]
training_filt = training[ , colSums(is.na(training)) == 0]
model = train(classe~., data = training_filt, method = "rf", preProcess = "pca")
warnings()
confusionMatrix(testing$classe, predict(model, newdata = testing))
confusionMatrix(testing$classe, predict(model, newdata = testing_p))
predict(model, newdata = testing_p)
answers = predict(model, newdata = testing)
answers
answers = predict(model, newdata = testing_p)
answers
pml_write_files(answers)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
inTrain = createDataPartition(y=Case, data = segmentationOriginal, p = 0.75, list = F)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 0.75, list = F)
training = segmentationOriginal[, inTrain]
training = segmentationOriginal[inTrain,]
testing = segmentationOriginal[-inTrain,]
set.seed(125)
model = train(Case~., data = training, method = "rpart")
newlines = data.frame(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
newlines = data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
newlines = data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
newlines2 = data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, VarIntenCh4 = 100)
newlines3 = data.frame(TotalIntench2 = 57,000, FiberWidthCh1 = 8, VarIntenCh4 = 100)
newlines4 = data.frame(FiberWidthCh1 = 8,VarIntenCh4 = 100, PerimStatusCh1=2 )
predict(model, newdata = newlines)
predict(model, newdata = newlines2)
predict(model, newdata = newlines3)
predict(model, newdata = newlines4)
model = train(Class~., data = training, method = "rpart")
predict(model, newdata = newlines)
model
model$finalModel
training = subset(training, Case = "Train")
model = train(Class~., data = training, method = "rpart")
fancyRpartPlot(model$finalModel)
library(rattle)
fancyRpartPlot(model$finalModel)
options(scipen=999)
fancyRpartPlot(model$finalModel)
options(scipen=999)
model = train(Class~., data = training, method = "rpart")
fancyRpartPlot(model$finalModel)
39e+3
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
install.packages(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
model = train(Area~., data = olive, method = "rpart")
View(olive)
?olive
predict(model, newdata = as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(testSA)
?SAheart
model = train(chd~c(alcohol, obesity, tobacco, typea, ldl), data = trainSA, method = "glm", family = "binomial")
model = train(chd, y = c(alcohol, obesity, tobacco, typea, ldl), data = trainSA, method = "glm", family = "binomial")
View(trainSA)
model = train(chd~alcohol+obesity+tobacco+typea+ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
model
model$finalModel
missClass(model,trainSA)
missClass(trainSA, model)
missClass(model,trainSA$chd)
missClass(trainSA$chd, predict(model, trainSA))
missClass(testSA$chd, predict(model, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
vowel.test
View(vowel.test)
vowel.test$y = as.factor(vowel.test$y)
vowel.train$y = as.factor(vowel.train$y)
set.seed(33833)
model = train(y~., data = vowel.train, method = "rf")
?importane
?importance
?varImp
varImp(model)
class(vowel.train$y)
vowel.train$y
varImp(model, value= y)
model = train(y~., data = vowel.train, method = "rf", importance = T)
varImp(model, value= y)
varImp(model)
model = randomForest(y~., data = vowel.train)
varImp(model)
sort(t(varImp(fit2)),index=TRUE,decreasing=TRUE)
sort(t(varImp(model)),index=TRUE,decreasing=TRUE)
model = randomForest(y~., data = vowel.train, importance = T)
sort(t(varImp(model)),index=TRUE,decreasing=TRUE)
order(model$importance[,13],decreasing=T)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 0.75, list = F)
training = segmentationOriginal[inTrain,]
testing = segmentationOriginal[-inTrain,]
set.seed(125)
model = train(Case~., data = training, method = "rpart")
model = rpart(Class~., data = training)
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model)
47e+3
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 0.75, list = F)
training = subset(segmentationOriginal, Case = "Train")
model = train(Case~., data = training, method = "rpart")
fancyRpartPlot(model)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 0.75, list = F)
training = subset(segmentationOriginal, Case = "Train")
model = rpart(Case~., data = training)
fancyRpartPlot(model)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 0.75, list = F)
training = subset(segmentationOriginal, Case = "Train")
model = rpart(Class~., data = training)
fancyRpartPlot(model)
model = train(chd~alcohol+obesity+tobacco+typea+ldl, data = trainSA, method = "glm", family = "binomial")
missClass(trainSA$chd, predict(model, trainSA))
missClass(testSA$chd, predict(model, testSA))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 0.75, list = F)
training = subset(segmentationOriginal, Case = "Train")
model = train(Class~., data = training, method = "rpart")
model
model$finalMode
model$finalModel
plot(model$finalModel)
fancyRpartPlot(model$finalModel)
47e+3
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
plot(model$finalModel, uniform = TRUE, main = "Classification Tree")
text(model$finalModel, use.n = TRUE, all = TRUE, cex = .8)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = createDataPartition(y=segmentationOriginal$Case, p = 0.75, list = F)
training = subset(segmentationOriginal, Case = "Train")
set.seed(125)
model = train(Class~., data = training, method = "rpart")
fancyRpartPlot(model$finalModel)
training = subset(segmentationOriginal, Case == "Train")
testing = segmentationOriginal[-inTrain,]
set.seed(125)
model = train(Case~., data = training, method = "rpart")
training = subset(segmentationOriginal, Case == "Train")
set.seed(125)
model = train(Case~., data = training, method = "rpart")
training = subset(segmentationOriginal, Case == "Train")
set.seed(125)
model = train(Class~., data = training, method = "rpart")
fancyRpartPlot(model$finalModel)
training = subset(segmentationOriginal, Case = "Train")
model = train(chd~age+alcohol+obesity+tobacco+typea+ldl, data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(model, testSA))
missClass(trainSA$chd, predict(model, trainSA))
library(manipulate)
manipulate(plot(1:x), x = slider(1,
100))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot
myPlot()
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
require(rCharts)
require("rCharts")
install.packages("rCharts")
require(rCharts)
setwd("~/shiny_app")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
author("shiny_app")
slidify("index.Rmd")
setwd("~/shiny_app")
slidify("index.Rmd")
getwd()
setwd("~/shiny_app/shiny_app")
getwd()
slidify("index.Rmd")
install_version("stringr", version="0.6.2")
devtools::install_version("stringr", version="0.6.2")
slidify("index.Rmd")
devtools::install-version("stringr", version="0.6.2")
devtools::install_version("stringr", version="0.6.2")
install.packages("C:/Users/eladiomontero/Downloads/stringr_0.6.2.tar.gz", repos = NULL, type = "source")
slidify("index.Rmd")
